Description: Fixed dpkg-source error

dpkg-source: info: local changes detected, the modified files are:
 source/.travis.yml
 source/grub-core/disk/luks.c
 source/grub-core/loader/i386/efi/linux.c

$ dpkg-source --commit

--- /dev/null
+++ gooroom-grub-2.02+dfsg1/.travis.yml
@@ -0,0 +1,53 @@
+dist: trusty
+
+sudo: required
+
+git:
+  depth: 5
+
+cache:
+  ccache: true
+  directories:
+    - $HOME/.sonar/cache
+
+env:
+  matrix:
+    - DEFINES="" SONARQUBE="TRUE"
+    - DEFINES="CPPFLAGS=-DTGRUB_HP_WORKAROUND" SONARQUBE="FALSE"
+    - DEFINES="CPPFLAGS=-DTGRUB_DEBUG" SONARQUBE="FALSE"
+  global:
+    - secure: "fsJ8kz9HO/dorxiZDKX3sUJZkQXECKlsZJ6GtoGwJWQyDfZ988msG0alZucRyOHr/3dO4I0UENxIWx4FuKIw1t33ngw2Ugi7muKe53KJJa5iUz0dl8uZ4ndSW45cmF9vvCDAaTRsRITRj4SP275CBO7vs83UhB5yiBwaZAhNwzk="
+    - secure: "De+Kuku2ICL773X3NKrFzrVBKasPMU9jBEBcpoSDK1AZ8ZsNytiYTOghm0j2jYKE13oPNjXR9wn1FWwF0jhWGwoAr/NvN0/BgHOG83gXmAEVlzU0SrUm7W/elQzbdsnmQfQss7P9GY4EJjARG/aXYw70dDpzNsc/25uS2Iy2M5U="
+compiler: gcc
+language: c
+
+before_script:
+  - jdk_switcher use oraclejdk8
+  - java -version
+  # fixme
+  - chmod a+x runSonarQubeAnalysis.sh
+
+script:
+  - echo ${DEFINES}
+  - ./autogen.sh && ./configure --target=i386 -with-platform=pc && make ${DEFINES} -j 2 --silent && ./runSonarQubeAnalysis.sh
+
+os:
+  - linux
+
+notifications:
+  email:
+    recipients:
+      - daniel@neus-online.eu
+addons:
+  apt:
+    packages:
+      - oracle-java8-installer
+  sonarqube: true
+  coverity_scan:
+    project:
+      name: Rohde-Schwarz-Cybersecurity/TrustedGRUB2
+      description: Build submitted via Travis CI
+    notification_email: daniel@neus-online.eu
+    build_command_prepend: "./autogen.sh;./configure --target=i386 -with-platform=pc;make clean"
+    build_command: make -j 2 --silent
+    branch_pattern: coverity_scan
--- gooroom-grub-2.02+dfsg1.orig/grub-core/disk/luks.c
+++ gooroom-grub-2.02+dfsg1/grub-core/disk/luks.c
@@ -26,6 +26,12 @@
 #include <grub/crypto.h>
 #include <grub/partition.h>
 #include <grub/i18n.h>
+#include <grub/file.h>
+#include <grub/env.h>
+
+/* Begin TCG extension */
+#include <grub/tpm.h>
+/* End TCG extension */
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
@@ -287,7 +293,7 @@ configure_ciphers (grub_disk_t disk, con
       grub_crypto_cipher_close (cipher);
       grub_crypto_cipher_close (essiv_cipher);
       grub_crypto_cipher_close (secondary_cipher);
-      return NULL;
+    return NULL;
     }
   newdev->cipher = cipher;
   newdev->offset = grub_be_to_cpu32 (header.payloadOffset);
@@ -382,90 +388,287 @@ luks_recover_key (grub_disk_t source,
 	  return grub_crypto_gcry_error (gcry_err);
 	}
 
-      grub_dprintf ("luks", "PBKDF2 done\n");
+	/* tpm functions not available in GRUB_UTIL */
+#ifndef GRUB_UTIL
 
-      gcry_err = grub_cryptodisk_setkey (dev, digest, keysize); 
-      if (gcry_err)
-	{
-	  grub_free (split_key);
-	  return grub_crypto_gcry_error (gcry_err);
-	}
-
-      length = (keysize * grub_be_to_cpu32 (header.keyblock[i].stripes));
-
-      /* Read and decrypt the key material from the disk.  */
-      err = grub_disk_read (source,
-			    grub_be_to_cpu32 (header.keyblock
-					      [i].keyMaterialOffset), 0,
-			    length, split_key);
-      if (err)
-	{
-	  grub_free (split_key);
-	  return err;
-	}
-
-      gcry_err = grub_cryptodisk_decrypt (dev, split_key, length, 0);
-      if (gcry_err)
-	{
-	  grub_free (split_key);
-	  return grub_crypto_gcry_error (gcry_err);
-	}
-
-      /* Merge the decrypted key material to get the candidate master key.  */
-      gcry_err = AF_merge (dev->hash, split_key, candidate_key, keysize,
-			   grub_be_to_cpu32 (header.keyblock[i].stripes));
-      if (gcry_err)
-	{
-	  grub_free (split_key);
-	  return grub_crypto_gcry_error (gcry_err);
+	// measure luks header
+	if (!grub_strcmp(grub_env_get("unsealmount"), "true")) {
+		grub_TPM_measure_buffer(&header, sizeof(header),
+				TPM_LUKS_HEADER_MEASUREMENT_PCR);
 	}
 
-      grub_dprintf ("luks", "candidate key recovered\n");
+#endif
 
-      /* Calculate the PBKDF2 of the candidate master key.  */
-      gcry_err = grub_crypto_pbkdf2 (dev->hash, candidate_key,
-				     grub_be_to_cpu32 (header.keyBytes),
-				     header.mkDigestSalt,
-				     sizeof (header.mkDigestSalt),
-				     grub_be_to_cpu32
-				     (header.mkDigestIterations),
-				     candidate_digest,
-				     sizeof (candidate_digest));
-      if (gcry_err)
-	{
-	  grub_free (split_key);
-	  return grub_crypto_gcry_error (gcry_err);
-	}
+	grub_puts_(N_("Attempting to decrypt master key..."));
+	keysize = grub_be_to_cpu32(header.keyBytes);
+  if (keysize > GRUB_CRYPTODISK_MAX_KEYLEN)
+    grub_fatal("luks_recover_key failed: key is too long");
+	for (i = 0; i < ARRAY_SIZE(header.keyblock); i++)
+		if (grub_be_to_cpu32 (header.keyblock[i].active) == LUKS_KEY_ENABLED
+				&& grub_be_to_cpu32 (header.keyblock[i].stripes) > max_stripes)
+			max_stripes = grub_be_to_cpu32(header.keyblock[i].stripes);
+
+	split_key = grub_malloc(keysize * max_stripes);
+	if (!split_key) {
+		grub_print_error();
+		grub_fatal("luks_recover_key failed.");
+	}
+
+	/* read in keyfile if provided */
+	grub_uint8_t* keyFileBuf = NULL;
+	grub_uint8_t* unsealedKeyFile = NULL;
+	char* secret = NULL;
+	grub_size_t secretSize = 0;
+
+	if (grub_env_get("keyfile") != 0) {
+		grub_file_t file = grub_file_open(grub_env_get("keyfile"));
+
+		if (!file) {
+			grub_free(split_key);
+			grub_print_error();
+			grub_fatal("luks_recover_key failed.");
+		}
+
+		grub_size_t fileSize = file->size;
+
+		keyFileBuf = grub_zalloc(fileSize);
+
+		if (!keyFileBuf) {
+			grub_file_close(file);
+			grub_free(split_key);
+			grub_fatal("keyfile read: memory allocation failed");
+		}
+
+		/* read file */
+		if (grub_file_read(file, keyFileBuf, fileSize)
+				!= (grub_ssize_t) fileSize) {
+			grub_free(keyFileBuf);
+			grub_free(split_key);
+			grub_file_close(file);
+			grub_print_error();
+			grub_fatal("luks_recover_key failed.");
+		}
+
+		grub_file_close(file);
+
+		secret = (char*) keyFileBuf;
+		secretSize = fileSize;
+
+#ifndef GRUB_UTIL
+		grub_size_t resultSize = 0;
+
+		// unseal keyfile ?
+		if (!grub_strcmp(grub_env_get("unsealmount"), "true")) {
+			grub_TPM_unseal(keyFileBuf, fileSize, &unsealedKeyFile,
+					&resultSize);
+			secret = (char*) unsealedKeyFile;
+			secretSize = resultSize;
+		}
+#endif
+
+	} else { /* only ask for passphrase if no keyfile specified */
+		grub_errno = GRUB_ERR_NONE;
+
+		/* Get the passphrase from the user. */
+		tmp = NULL;
+
+		if (source->partition)
+			tmp = grub_partition_get_name(source->partition);
+
+		grub_printf_(N_("Enter passphrase for %s%s%s (%s): "), source->name,
+				source->partition ? "," : "", tmp ? : "", dev->uuid);
+
+		grub_free(tmp);
+		if (!grub_password_get(passphrase, MAX_PASSPHRASE)) {
+			grub_free(split_key);
+			grub_fatal("Passphrase not supplied");
+		}
+
+		secret = passphrase;
+		secretSize = grub_strlen(passphrase);
+	}
+
+	/* Try to recover master key from each active keyslot. */
+	for (i = 0; i < ARRAY_SIZE(header.keyblock); i++) {
+		gcry_err_code_t gcry_err;
+      grub_uint8_t candidate_key[GRUB_CRYPTODISK_MAX_KEYLEN];
+      grub_uint8_t digest[GRUB_CRYPTODISK_MAX_KEYLEN];
 
-      /* Compare the calculated PBKDF2 to the digest stored
-         in the header to see if it's correct.  */
-      if (grub_memcmp (candidate_digest, header.mkDigest,
-		       sizeof (header.mkDigest)) != 0)
-	{
-	  grub_dprintf ("luks", "bad digest\n");
-	  continue;
+		/* Check if keyslot is enabled.  */
+		if (grub_be_to_cpu32 (header.keyblock[i].active) != LUKS_KEY_ENABLED)
+			continue;
+
+		grub_dprintf("luks", "Trying keyslot %d\n", i);
+
+		/* Calculate the PBKDF2 of the user supplied passphrase / keyfile.  */
+		gcry_err = grub_crypto_pbkdf2(dev->hash, (grub_uint8_t *) secret,
+				secretSize, header.keyblock[i].passwordSalt,
+				sizeof(header.keyblock[i].passwordSalt),
+				grub_be_to_cpu32(header.keyblock[i].passwordIterations), digest,
+				keysize);
+
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		grub_dprintf("luks", "PBKDF2 done\n");
+
+		gcry_err = grub_cryptodisk_setkey(dev, digest, keysize);
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		length = (keysize * grub_be_to_cpu32(header.keyblock[i].stripes));
+
+		/* Read and decrypt the key material from the disk.  */
+		err = grub_disk_read(source,
+				grub_be_to_cpu32(header.keyblock[i].keyMaterialOffset), 0,
+				length, split_key);
+		if (err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_print_error();
+			grub_fatal("luks_recover_key failed.");
+		}
+
+		gcry_err = grub_cryptodisk_decrypt(dev, split_key, length, 0);
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		/* Merge the decrypted key material to get the candidate master key.  */
+		gcry_err = AF_merge(dev->hash, split_key, candidate_key, keysize,
+				grub_be_to_cpu32(header.keyblock[i].stripes));
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		grub_dprintf("luks", "candidate key recovered\n");
+
+		/* Calculate the PBKDF2 of the candidate master key.  */
+		gcry_err = grub_crypto_pbkdf2(dev->hash, candidate_key,
+				grub_be_to_cpu32(header.keyBytes), header.mkDigestSalt,
+				sizeof(header.mkDigestSalt),
+				grub_be_to_cpu32(header.mkDigestIterations), candidate_digest,
+				sizeof(candidate_digest));
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		/* Compare the calculated PBKDF2 to the digest stored
+		 in the header to see if it's correct.  */
+		if (grub_memcmp(candidate_digest, header.mkDigest,
+				sizeof(header.mkDigest)) != 0) {
+			grub_dprintf("luks", "bad digest\n");
+			continue;
+		}
+
+		/* TRANSLATORS: It's a cryptographic key slot: one element of an array
+		 where each element is either empty or holds a key.  */
+		grub_printf_(N_("Slot %d opened\n"), i);
+
+		/* Set the master key.  */
+		gcry_err = grub_cryptodisk_setkey(dev, candidate_key, keysize);
+		if (gcry_err) {
+			if (keyFileBuf) {
+				grub_free(keyFileBuf);
+			}
+
+			if (unsealedKeyFile) {
+				grub_free(unsealedKeyFile);
+			}
+
+			grub_free(split_key);
+			grub_fatal("luks_recover_key failed.");
+			//return grub_crypto_gcry_error(gcry_err);
+		}
+
+		if (keyFileBuf) {
+			grub_free(keyFileBuf);
+		}
+
+		if (unsealedKeyFile) {
+			grub_free(unsealedKeyFile);
+		}
+
+		grub_free(split_key);
+
+		grub_env_unset("unsealmount");
+		grub_env_unset("keyfile");
+
+		return GRUB_ERR_NONE;
+	}
+
+	grub_free(split_key);
+	if (keyFileBuf) {
+		grub_free(keyFileBuf);
 	}
 
-      /* TRANSLATORS: It's a cryptographic key slot: one element of an array
-	 where each element is either empty or holds a key.  */
-      grub_printf_ (N_("Slot %d opened\n"), i);
-
-      /* Set the master key.  */
-      gcry_err = grub_cryptodisk_setkey (dev, candidate_key, keysize); 
-      if (gcry_err)
-	{
-	  grub_free (split_key);
-	  return grub_crypto_gcry_error (gcry_err);
+	if (unsealedKeyFile) {
+		grub_free(unsealedKeyFile);
 	}
 
-      grub_free (split_key);
-
-      return GRUB_ERR_NONE;
-    }
-
-  grub_free (split_key);
-  return GRUB_ACCESS_DENIED;
+	grub_fatal("luks_recover_key failed.");
+	//return GRUB_ACCESS_DENIED;
 }
+/* End TCG extension */
 
 struct grub_cryptodisk_dev luks_crypto = {
   .scan = configure_ciphers,
--- gooroom-grub-2.02+dfsg1.orig/grub-core/loader/i386/efi/linux.c
+++ gooroom-grub-2.02+dfsg1/grub-core/loader/i386/efi/linux.c
@@ -27,7 +27,6 @@
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
 #include <grub/efi/efi.h>
-#include <grub/safemath.h>
 #include <grub/efi/linux.h>
 /* Begin TCG Extension */
 #include <grub/tpm.h>
@@ -36,6 +35,8 @@
 #include <grub/term.h>
 #include <grub/normal.h>
 #include <grub/time.h>
+#include <grub/safemath.h>
+#include <stddef.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
 
