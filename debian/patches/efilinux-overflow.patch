From db2a099346bd83caf5805aef97c043164a3be34f Mon Sep 17 00:00:00 2001
From: Colin Watson <cjwatson@debian.org>
Date: Fri, 24 Jul 2020 17:18:09 +0100
Subject: efilinux: Fix integer overflows in grub_cmd_initrd

These could be triggered by an extremely large number of arguments to
the initrd command on 32-bit architectures, or a crafted filesystem with
very large files on any architecture.

Fixes: CVE-2020-15707

Signed-off-by: Colin Watson <cjwatson@debian.org>

Patch-Name: efilinux-overflow.patch
---
 grub-core/loader/i386/efi/linux.c | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/grub-core/loader/i386/efi/linux.c b/grub-core/loader/i386/efi/linux.c
index 0f4b0b4ab..300737f98 100644
--- a/grub-core/loader/i386/efi/linux.c
+++ b/grub-core/loader/i386/efi/linux.c
@@ -27,6 +27,7 @@
 #include <grub/i18n.h>
 #include <grub/lib/cmdline.h>
 #include <grub/efi/efi.h>
+#include <grub/safemath.h>
 #include <stddef.h>
 
 GRUB_MOD_LICENSE ("GPLv3+");
@@ -145,7 +146,7 @@ grub_cmd_initrd (grub_command_t cmd __attribute__ ((unused)),
       goto fail;
     }
 
-  files = grub_zalloc (argc * sizeof (files[0]));
+  files = grub_calloc (argc, sizeof (files[0]));
   if (!files)
     goto fail;
 
@@ -156,7 +157,11 @@ grub_cmd_initrd (grub_command_t cmd __attribute__ ((unused)),
       if (! files[i])
         goto fail;
       nfiles++;
-      size += ALIGN_UP (grub_file_size (files[i]), 4);
+      if (grub_add (size, ALIGN_UP (grub_file_size (files[i]), 4), &size))
+	{
+	  grub_error (GRUB_ERR_OUT_OF_RANGE, N_("overflow is detected"));
+	  goto fail;
+	}
     }
 
   initrd_mem = grub_efi_allocate_pages_max (0x3fffffff, BYTES_TO_PAGES(size));
